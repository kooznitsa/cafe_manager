x-app-main:
  &app-main
  networks:
    - service

x-sentry-common:
  &sentry-common
  environment:
    SENTRY_SECRET_KEY: ${SENTRY_SECRET_KEY}
    SENTRY_POSTGRES_HOST: ${SENTRY_POSTGRES_HOST:-sentry-postgres}
    SENTRY_DB_USER: ${SENTRY_DB_USER:-sentry}
    SENTRY_DB_PASSWORD: ${SENTRY_DB_PASSWORD:-sentry}
    SENTRY_REDIS_HOST: ${SENTRY_REDIS_HOST:-redis}
  profiles: [sentry]

services:
  database:
    <<: *app-main
    image: postgres:${POSTGRES_VERSION:-16}-alpine
    container_name: "${APP_NAME}_database"
    working_dir: /app
    ports:
      - "${POSTGRES_PORT:-5432}:5432"
    restart: "always"
    environment:
      POSTGRES_DB: ${POSTGRES_DB:-app}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-!ChangeMe!}
      POSTGRES_USER: ${POSTGRES_USER:-app}
    healthcheck:
      test: ["CMD", "pg_isready", "-d", "${POSTGRES_DB:-app}", "-U", "${POSTGRES_USER:-app}"]
      timeout: 5s
      retries: 5
      start_period: 60s
    volumes:
      - dump:/app/dump
      - database_data:/var/lib/postgresql/data:rw
      # You may use a bind-mounted host directory instead, so that it is harder to accidentally remove the volume and lose all your data!
      # - ./docker/db/data:/var/lib/postgresql/data:rw
    profiles: [cm, sentry, rabbit]

  php-fpm:
    <<: *app-main
    build: deploy
    container_name: "${APP_NAME}_php"
    ports:
      - "9000:9000"
    volumes:
      - ./:/app
    working_dir: /app
    user: 1000:1000
    profiles: [cm, sentry, rabbit]

  nginx:
    <<: *app-main
    image: nginx
    container_name: "${APP_NAME}_nginx"
    working_dir: /app
    ports:
      - "7777:80"
    volumes:
      - ./:/app
      - ./deploy/nginx.conf:/etc/nginx/conf.d/default.conf
    profiles: [cm, sentry, rabbit]

  memcached:
    <<: *app-main
    image: memcached:latest
    container_name: "memcached"
    restart: always
    ports:
      - "11211:11211"
    profiles: [cm, sentry, rabbit]

  redis:
    <<: *app-main
    container_name: "redis"
    image: redis:alpine
    ports:
      - "6379:6379"
    profiles: [cm, sentry, rabbit]

  graphite:
    <<: *app-main
    image: graphiteapp/graphite-statsd
    container_name: "graphite"
    restart: always
    ports:
      - "8000:80"
      - "2003:2003"
      - "2004:2004"
      - "2023:2023"
      - "2024:2024"
      - "8125:8125/udp"
      - "8126:8126"
    volumes:
      - "graphite_storage:/var/lib/graphite"
    profiles: [cm, sentry, rabbit]

  grafana:
    <<: *app-main
    image: grafana/grafana
    container_name: "grafana"
    restart: always
    ports:
      - "3000:3000"
    volumes:
      - "grafana_storage:/var/lib/grafana"
    profiles: [cm, sentry, rabbit]

  rabbitmq:
    <<: *app-main
    image: rabbitmq:3.7.5-management
    working_dir: /app
    hostname: rabbitmq
    container_name: "rabbitmq"
    ports:
      - "15672:15672"
      - "5672:5672"
    environment:
      RABBITMQ_DEFAULT_USER: ${RABBITMQ_DEFAULT_USER:-user}
      RABBITMQ_DEFAULT_PASS: ${RABBITMQ_DEFAULT_PASS:-password}
    volumes:
      - rabbitmq_volume:/var/lib/rabbitmq/mnesia/rabbit@my-rabbit
    profiles: [rabbit]

  sentry-postgres:
    <<: *app-main
    image: postgres
    container_name: "sentry-postgres"
    ports:
      - "5433:5432"
    environment:
      POSTGRES_USER: sentry
      POSTGRES_PASSWORD: sentry
      POSTGRES_DB: sentry
    volumes:
      - sentry_pgdb:/var/lib/postgresql/data:rw
    profiles: [sentry]

  sentry:
    <<: *sentry-common
    image: sentry
    # platform: linux/x86_64 # For Mac m1
    container_name: "sentry"
    links:
      - redis
      - sentry-postgres
    ports:
      - "10000:9000"

  cron:
    <<: *sentry-common
    image: sentry
    container_name: "sentry-cron"
    links:
      - redis
      - sentry-postgres
    command: "sentry run cron"

  worker:
    <<: *sentry-common
    image: sentry
    container_name: "sentry-worker"
    links:
      - redis
      - sentry-postgres
    command: "sentry run worker"

volumes:
  dump:
  database_data:
  graphite_storage:
  grafana_storage:
  rabbitmq_volume:
  sentry_pgdb:

networks:
  service:
    name: service
